name: CI Pipeline with Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-build-run:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: ✅ Run database tests (standalone)
        run: |
          python test_database_only.py

      - name: ✅ Run comprehensive unit tests
        run: pytest -v test/

      - name: 🧪 Test API endpoints
        run: |
          python -c "
          import sys, os
          sys.path.insert(0, '.')
          from app import app
          from database import init_database, save_pdf_to_db
          
          # Initialize test data
          init_database()
          save_pdf_to_db('test.pdf', 'test.pdf', 'uploads/test.pdf')
          
          # Test with Flask test client
          with app.test_client() as client:
              response = client.get('/api/stats')
              assert response.status_code == 200
              print('✓ API stats endpoint working')
              
              response = client.get('/admin/db')
              assert response.status_code == 200
              print('✓ Admin DB endpoint working')
          "

      - name: 🐳 Build Docker image
        run: docker build -t flask-cicd-app .

      - name: 🚀 Run Docker container
        run: docker run -d -p 8080:8080 --name test-container flask-cicd-app

      - name: 🔍 Health check on container
        run: |
          echo "Waiting for container to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:8080 >/dev/null 2>&1; then
              echo "✓ Container is responding"
              break
            fi
            echo "Attempt $i/30: Container not ready yet, waiting 2 seconds..."
            sleep 2
          done
          
          # Final health checks
          curl --fail http://localhost:8080 || exit 1
          curl --fail http://localhost:8080/api/stats || exit 1
          echo "✓ Container health check passed"

      - name: 🧹 Cleanup container
        if: always()
        run: |
          docker stop test-container || true
          docker rm test-container || true